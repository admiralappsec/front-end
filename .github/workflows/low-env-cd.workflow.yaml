# name of the workflow - in this case, low environment continuous delivery workflow
name: Low Env CD

# controls when the action will run.  Triggers on all push or pull requests on all branches
on:
  repository_dispatch:
    types: [ my-event ]
    
#global environment variables used for the jobs below
env:
  # name of the container image registry
  REGISTRY_NAME: mmdemotest
  # name of the application to be used - this will be used during the tag/commit phase of the build - as the repository name
  APP_NAME: front-end
  
# jobs associated with this workflow  
jobs:

  Deploy_Test_Integration:
    # image this operation will run on
    runs-on: ubuntu-latest
    # steps that are executed within the specified stage
    steps:
    - run: |
        echo 'Preping for deployment into the Integration Environment'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Prep for deployment
    - run: |
        echo 'Deploying into the Integration Environment'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Kubernetes deployment
    - run: |
        echo 'Testing application within the Integration Environment'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Integration Tests
      
  # this job is labeled security-gate - once build/test criteria is met, this job runs to validate vulnerabilities against set gate thresholds - likeness to a 'stage'
  Contrast_Security_Gate_Integration:
    # this job depends on 'build-test' completing successfully - dependency
    needs: Deploy_Test_Integration
    # image this operation will run on
    runs-on: ubuntu-latest
    # steps that are executed within the specified stage
    steps:
    # run a shell script - ie. command line
    - run: |
        echo 'this is an automated gate'; echo 'CRITERIA 1 has been successfully met.  Evaluating gate based on gate policies...';  echo 'gate policies passed.'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Contrast Security threshold check
      
  # this job is labeled commit - if the gate passes, this job downloads the tarred-up docker image and commits to the ACR
  Deploy_Test_UAT:
    # this job depends on 'security-gate' completing successfully - dependency
    needs: Contrast_Security_Gate_Integration
    # image this operation will run on
    runs-on: ubuntu-latest
    # steps that are executed within the specified stage
    steps:
    - run: |
        echo 'Preping for deployment into the UAT Environment'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Prep for deployment
    - run: |
        echo 'Deploying into the UAT Environment'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Kubernetes deployment
    - run: |
        echo 'Testing application within the UAT Environment'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: UAT Tests

  # this job is labeled security-gate - once build/test criteria is met, this job runs to validate vulnerabilities against set gate thresholds - likeness to a 'stage'
  Contrast_Security_Gate_UAT:
    # this job depends on 'build-test' completing successfully - dependency
    needs: Deploy_Test_UAT
    # image this operation will run on
    runs-on: ubuntu-latest
    # steps that are executed within the specified stage
    steps:
    # run a shell script - ie. command line
    - run: |
        echo 'this is an automated gate'; echo 'CRITERIA 1 has been successfully met.  Evaluating gate based on gate policies...';  echo 'gate policies passed.'
      # explicitly passing the name of this step - must be AFTER 'run'
      name: Contrast Security threshold check
    
    - uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: admiralappsec/front-end
        event-type: my-event2
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
      name: Repository Dispatch
